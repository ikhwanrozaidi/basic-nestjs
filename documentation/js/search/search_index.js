var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.062,1,2.19]],["body/controllers/AppController.html",[0,1.793,1,3.696,2,1.479,3,0.411,4,0.362,5,0.362,6,3.888,7,0.498,8,0.027,9,1.028,10,3.292,11,3.888,12,0.411,13,0.019,14,4.618,15,1.981,16,0.023,17,0.023]],["title/modules/AppModule.html",[18,1.062,19,2.19]],["body/modules/AppModule.html",[1,3.032,2,1.249,3,0.239,4,0.211,5,0.211,7,0.557,8,0.028,9,0.599,10,3.049,11,2.264,12,0.239,13,0.011,16,0.016,17,0.016,18,1.471,19,4.256,20,1.153,21,1.246,22,1.469,23,1.469,24,1.246,25,2.509,26,1.469,27,2.264,28,2.264,29,2.264,30,3.049,31,3.337,32,3.337,33,3.337,34,2.802,35,2.132,36,1.469,37,1.35,38,2.689,39,2.509,40,2.689,41,2.689,42,2.689,43,2.689,44,1.608,45,1.153,46,1.674,47,2.689,48,1.083,49,2.689,50,2.689,51,1.469,52,1.246,53,2.689,54,2.334,55,2.689,56,2.689,57,1.608,58,2.689,59,0.555,60,3.902,61,1.469,62,2.689,63,2.132,64,2.689,65,2.689,66,2.689,67,2.689,68,1.775,69,2.689,70,2.689,71,2.689,72,2.264,73,1.984,74,1.775]],["title/injectables/AppService.html",[10,1.813,75,1.227]],["body/injectables/AppService.html",[3,0.396,4,0.349,5,0.349,7,0.396,8,0.027,9,0.991,10,2.991,12,0.396,13,0.018,16,0.022,17,0.022,75,2.024,76,2.431,77,3.747,78,0.784,79,2.536,80,6.186,81,0.991,82,4.45,83,2.062,84,1.753,85,2.062,86,4.45,87,4.45]],["title/controllers/AuthController.html",[0,1.062,88,2.19]],["body/controllers/AuthController.html",[0,1.458,2,1.458,3,0.405,4,0.357,5,0.357,7,0.494,8,0.027,9,1.014,12,0.405,13,0.019,15,1.953,16,0.023,17,0.023,88,3.665,89,3.834,90,2.723,91,4.553,92,3.007,93,3.834,94,4.553,95,2.11,96,2.286]],["title/modules/AuthModule.html",[18,1.062,30,1.813]],["body/modules/AuthModule.html",[2,1.572,3,0.334,4,0.294,5,0.294,7,0.517,8,0.027,9,0.835,12,0.334,13,0.015,16,0.02,17,0.02,18,1.753,20,1.609,21,1.738,22,2.049,23,2.049,24,1.738,25,2.991,26,2.991,30,3.444,34,2.465,35,2.683,36,2.049,37,1.883,39,2.049,88,3.614,92,3.322,93,3.158,97,3.158,98,3.158,99,3.158,100,3.75,101,3.242,102,3.158,103,3.75]],["title/injectables/AuthService.html",[75,1.227,92,1.666]],["body/injectables/AuthService.html",[3,0.289,4,0.255,5,0.255,7,0.397,8,0.027,9,0.724,12,0.289,13,0.013,15,2.185,16,0.018,17,0.018,46,1.395,57,1.945,59,1.052,63,1.777,68,2.946,75,1.65,76,1.777,78,0.573,79,2.068,81,1.221,83,2.068,84,1.983,85,2.068,92,2.241,95,2.068,101,2.147,104,2.738,105,1.238,106,3.154,107,2.869,108,4.617,109,5.095,110,2.738,111,3.252,112,2.241,113,1.914,114,1.535,115,3.252,116,3.252,117,3.252,118,2.361,119,3.252,120,2.147,121,0.839,122,2.738,123,3.252,124,2.738,125,2.738,126,3.252,127,3.252,128,3.252,129,2.399,130,3.252,131,3.252]],["title/classes/CreatePostDto.html",[13,0.014,132,1.813]],["body/classes/CreatePostDto.html",[3,0.137,4,0.12,5,0.12,7,0.394,8,0.028,12,0.137,13,0.013,16,0.01,17,0.01,48,1.406,51,0.839,59,1.182,63,1.758,73,1.134,74,2.461,78,0.271,81,1.162,84,1.833,105,0.893,114,1.878,121,1.347,132,1.38,133,0.712,134,4.502,135,1.134,136,3.455,137,2.124,138,2.71,139,3.609,140,2.71,141,2.124,142,2.464,143,2.124,144,3.04,145,3.455,146,1.536,147,3.466,148,1.536,149,1.536,150,2.527,151,2.527,152,2.751,153,2.527,154,1.536,155,1.872,156,2.527,157,1.536,158,1.536,159,4.12,160,2.127,161,1.38,162,2.527,163,2.127,164,1.536,165,1.536,166,2.212,167,3.139,168,4.431,169,1.668,170,2.127,171,2.127,172,1.536,173,1.668,174,1.536,175,2.527,176,2.127,177,2.527,178,2.527,179,2.527,180,2.527,181,1.536,182,1.536,183,2.527,184,3.139,185,2.527,186,2.527,187,2.527,188,1.536,189,1.536,190,3.139,191,3.139,192,1.864,193,2.127,194,2.127,195,2.127,196,2.127,197,2.127,198,1.536,199,2.71,200,1.536,201,3.04,202,1.536,203,2.127,204,2.127,205,2.127,206,2.127,207,1.536,208,1.536,209,1.536,210,3.218,211,1.536,212,2.527,213,2.527,214,1.536,215,1.536,216,2.527,217,1.536,218,2.527,219,1.536,220,1.536,221,2.527,222,1.864,223,2.464,224,3.269,225,3.269,226,2.127,227,1.134,228,1.134,229,1.134,230,1.536,231,0.771,232,1.134,233,1.293,234,1.293,235,1.014,236,1.014,237,3.269,238,3.269,239,0.771,240,1.536,241,2.527,242,1.536,243,2.127,244,1.293,245,1.536,246,1.293,247,1.134,248,1.293,249,1.536,250,1.864,251,1.536]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.014,155,1.666]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.387,4,0.341,5,0.341,7,0.387,8,0.027,12,0.387,13,0.018,16,0.022,17,0.022,48,1.498,59,0.898,78,0.767,81,0.969,84,1.729,105,1.498,121,1.123,133,2.016,155,2.71,222,3.983,223,3.228,231,2.184,235,3.564,250,4.331,252,2.315,253,3.663,254,4.351,255,4.351,256,4.351]],["title/classes/CreateTagDto.html",[13,0.014,257,2.448]],["body/classes/CreateTagDto.html",[3,0.246,4,0.217,5,0.217,7,0.354,8,0.027,12,0.246,13,0.016,16,0.016,17,0.016,48,0.767,59,1.117,74,2.628,78,0.487,81,1.205,84,1.968,105,1.105,113,2.001,114,1.938,121,1.396,133,1.281,137,3.08,141,3.08,142,3.235,147,3.37,166,2.031,190,4.298,191,4.298,192,2.938,193,3.352,194,3.352,195,3.352,196,3.352,197,3.352,199,4.298,222,2.938,223,3.37,225,3.767,226,3.352,227,2.04,228,2.04,229,2.04,231,1.388,237,3.443,238,3.767,239,1.388,244,2.328,246,2.328,247,2.04,257,2.938,258,4.744,259,2.328,260,2.765,261,2.765,262,2.765,263,2.765,264,2.765,265,2.765,266,2.765,267,2.765,268,2.328,269,2.765,270,2.765,271,2.765,272,3.982]],["title/classes/CreateUserDto.html",[13,0.014,273,1.813]],["body/classes/CreateUserDto.html",[3,0.278,4,0.245,5,0.245,7,0.278,8,0.027,12,0.278,13,0.018,16,0.018,17,0.018,59,1.113,68,3.295,78,0.551,81,1.201,84,1.964,105,1.205,120,3.295,121,1.392,133,1.449,192,3.205,223,3.225,224,3.205,225,4.181,227,2.307,228,2.307,229,2.307,231,1.57,247,3.205,273,2.373,274,4.771,275,2.307,276,3.683,277,4.202,278,3.127,279,3.127,280,3.127,281,3.127,282,3.127,283,3.127,284,3.127,285,5.393,286,4.344,287,4.344,288,4.344,289,4.344,290,4.344,291,5.865,292,4.344,293,1.863,294,4.344,295,4.344,296,3.127,297,4.344,298,3.127,299,5.393,300,3.127,301,3.127]],["title/classes/GetUsersParamDto.html",[13,0.014,302,1.984]],["body/classes/GetUsersParamDto.html",[3,0.347,4,0.306,5,0.306,7,0.497,8,0.027,12,0.347,13,0.023,16,0.021,17,0.021,46,2.161,59,1.152,78,0.687,81,0.869,105,1.398,114,1.733,118,2.829,121,1.007,133,1.807,147,3.012,166,1.552,224,3.717,231,1.958,232,2.878,238,3.717,239,1.958,293,2.393,302,3.012,303,4.241,304,3.325,305,3.284,306,3.9,307,5.037,308,3.9,309,3.9,310,4.241,311,3.284]],["title/entities/MetaOption.html",[312,1.423,313,1.537]],["body/entities/MetaOption.html",[3,0.313,4,0.276,5,0.276,7,0.313,8,0.027,12,0.313,13,0.014,16,0.019,17,0.019,52,2.737,59,1.219,61,1.924,78,0.62,81,1.262,84,1.508,105,1.307,118,2.459,121,1.463,161,2.573,173,3.74,184,3.965,250,3.916,252,2.533,293,2.02,312,2.02,313,2.182,314,2.965,315,5.307,316,4.468,317,4.973,318,3.521,319,3.503,320,3.521,321,2.324,322,3.109,323,3.521,324,3.521,325,3.109,326,1.631]],["title/controllers/MetaOptionsController.html",[0,1.062,327,2.19]],["body/controllers/MetaOptionsController.html",[0,1.174,2,1.174,3,0.326,4,0.287,5,0.287,7,0.482,8,0.028,9,0.816,12,0.326,13,0.015,15,1.572,16,0.02,17,0.02,48,1.598,51,2.003,52,2.242,57,2.192,59,0.757,78,0.646,79,2.242,81,0.816,83,1.699,85,1.699,90,2.192,95,1.699,96,1.841,106,2.719,112,1.841,113,1.572,114,1.261,121,0.946,155,3.087,236,2.42,252,2.075,327,3.193,328,3.087,329,4.838,330,2.643,331,3.087,332,3.666,333,2.42,334,2.003,335,3.146,336,3.087,337,3.087,338,3.666,339,3.087,340,3.666]],["title/modules/MetaOptionsModule.html",[18,1.062,31,1.984]],["body/modules/MetaOptionsModule.html",[2,1.53,3,0.32,4,0.282,5,0.282,7,0.53,8,0.028,9,0.801,12,0.32,13,0.015,16,0.02,17,0.02,18,1.718,20,1.544,21,1.667,22,1.966,23,1.966,24,1.667,25,2.931,26,2.931,31,3.732,35,2.611,36,1.966,37,1.807,39,1.966,44,2.152,45,1.544,51,2.611,52,1.667,252,1.544,313,2.214,327,3.542,335,3.593,336,3.03,337,3.03,341,3.03,342,3.03,343,3.03,344,3.599,345,3.599,346,2.152,347,2.376]],["title/injectables/MetaOptionsService.html",[75,1.227,335,1.813]],["body/injectables/MetaOptionsService.html",[3,0.299,4,0.264,5,0.264,7,0.518,8,0.028,9,0.749,12,0.299,13,0.014,15,1.443,16,0.019,17,0.019,45,1.443,48,0.933,51,1.838,57,2.011,59,0.943,75,1.689,76,1.838,78,0.593,79,2.116,81,1.017,83,1.558,85,1.558,95,2.116,96,1.689,106,2.603,112,2.293,113,1.959,114,1.571,155,3.011,236,2.22,252,2.224,313,2.116,326,1.558,330,2.495,331,3.845,334,1.838,335,2.495,346,2.011,348,4.366,349,2.832,350,3.826,351,3.364,352,3.671,353,3.364,354,4.366,355,3.364,356,2.482,357,2.482,358,2.832,359,3.364,360,2.482,361,3.364]],["title/classes/PatchUserDto.html",[13,0.014,362,2.19]],["body/classes/PatchUserDto.html",[3,0.413,4,0.363,5,0.363,7,0.5,8,0.027,12,0.413,13,0.019,16,0.023,17,0.023,133,2.15,273,2.535,275,3.423,330,2.535,362,3.707,363,3.906,364,4.728,365,5.615,366,3.906,367,3.906,368,3.906,369,3.423]],["title/entities/Post.html",[48,0.921,312,1.423]],["body/entities/Post.html",[3,0.178,4,0.157,5,0.157,7,0.419,8,0.028,12,0.178,13,0.008,16,0.013,17,0.013,48,1.066,51,1.093,52,0.927,59,1.294,61,1.093,63,3.153,78,0.353,81,1.285,84,1.877,105,0.867,114,2.017,118,1.78,121,1.462,136,2.835,137,2.536,138,3.234,139,3.977,140,3.234,141,2.536,142,2.297,143,2.536,144,2.835,145,2.835,155,1.005,161,2.945,163,2.63,173,2.062,176,2.63,201,3.473,233,1.685,234,1.685,235,1.321,236,1.321,243,4.539,252,0.858,293,1.34,312,1.34,313,2.011,319,2.536,321,3.558,322,4.048,325,3.657,326,0.927,346,1.197,370,1.685,371,3.654,372,2.001,373,3.681,374,3.681,375,2.63,376,2.001,377,2.001,378,2.001,379,3.124,380,2.001,381,2.001,382,4.34,383,2.001,384,2.001,385,2.001,386,4.34,387,2.305,388,2.001,389,2.001,390,2.001,391,2.001,392,3.124,393,3.124,394,2.001,395,2.001]],["title/controllers/PostsController.html",[0,1.062,396,2.19]],["body/controllers/PostsController.html",[0,0.814,2,0.814,3,0.226,4,0.199,5,0.199,7,0.466,8,0.027,9,0.566,12,0.226,13,0.01,15,1.09,16,0.015,17,0.015,48,1.57,59,0.918,74,3.239,78,0.448,79,1.735,81,0.99,83,2.06,84,1.199,85,1.735,90,1.52,95,1.178,96,1.276,106,2.976,112,2.233,113,1.907,114,1.53,121,1.148,132,2.989,143,2.472,152,2.763,166,1.952,239,1.276,333,1.678,334,1.389,396,2.472,397,2.14,398,3.153,399,4.447,400,3.745,401,2.542,402,2.542,403,3.745,404,2.24,405,2.542,406,4.906,407,4.906,408,4.906,409,4.131,410,4.906,411,2.542,412,2.542,413,3.745,414,2.542,415,2.14,416,2.542,417,3.612,418,2.542,419,3.153,420,3.745,421,2.542,422,4.131,423,2.542,424,2.542,425,2.14,426,3.153,427,2.429,428,2.14,429,3.744,430,3.744,431,2.14,432,2.763,433,2.14,434,2.542,435,2.542,436,2.542,437,2.542,438,2.542,439,3.153,440,2.542,441,2.542,442,2.542,443,2.542]],["title/modules/PostsModule.html",[18,1.062,32,1.984]],["body/modules/PostsModule.html",[2,1.504,3,0.312,4,0.275,5,0.275,7,0.552,8,0.028,9,0.781,12,0.312,13,0.014,16,0.019,17,0.019,18,1.696,20,1.505,21,1.626,22,1.917,23,1.917,24,1.626,25,2.894,26,1.917,32,3.769,34,3.048,35,2.567,36,1.917,37,1.761,39,2.567,44,2.098,45,1.505,48,1.304,52,1.626,102,2.954,252,1.505,313,2.177,346,2.098,347,2.316,396,3.497,427,3.317,428,2.954,444,2.954,445,3.508,446,2.954,447,3.508,448,3.508,449,2.954]],["title/injectables/PostsService.html",[75,1.227,427,1.813]],["body/injectables/PostsService.html",[3,0.194,4,0.17,5,0.17,7,0.493,8,0.028,9,0.484,12,0.194,13,0.009,15,0.933,16,0.014,17,0.014,45,0.933,46,1.736,48,1.357,52,1.008,59,0.936,75,1.232,76,1.188,78,0.383,79,1.543,81,1.01,83,1.543,84,1.296,85,2.102,95,1.543,96,1.672,105,0.924,106,2.91,107,2.39,110,1.831,112,2.032,113,1.736,114,1.393,121,0.561,124,1.831,129,2.458,132,3.102,136,2.458,142,1.992,145,3.807,152,2.458,252,0.933,313,1.008,326,1.008,330,2.672,333,1.436,334,1.188,339,1.831,346,1.301,350,3.347,352,3.656,354,4.118,356,1.605,357,1.605,358,2.804,360,2.987,398,1.831,404,2.421,415,1.831,427,1.82,432,1.605,449,1.831,450,1.831,451,2.804,452,4.537,453,2.175,454,2.175,455,2.175,456,3.331,457,3.331,458,2.175,459,2.175,460,3.347,461,3.331,462,2.175,463,1.831,464,2.175,465,2.175,466,2.175,467,2.175,468,3.331,469,2.804,470,1.831,471,3.331,472,1.605,473,1.831,474,1.831,475,2.175,476,2.175,477,2.175,478,1.831,479,1.831,480,4.048,481,2.175,482,2.175]],["title/entities/Tag.html",[54,1.984,312,1.423]],["body/entities/Tag.html",[3,0.222,4,0.196,5,0.196,7,0.222,8,0.027,12,0.222,13,0.01,16,0.015,17,0.015,54,2.21,59,1.297,61,1.364,63,3.279,78,0.44,81,1.314,84,1.922,105,1.025,113,1.887,114,1.87,118,2.039,121,1.523,137,2.905,141,2.905,142,2.631,161,2.657,166,1.751,173,3.588,293,1.585,312,1.585,316,3.705,317,3.705,319,2.905,321,3.427,322,3.962,325,3.588,326,1.157,371,4.095,373,4.011,374,4.011,375,3.112,387,3.589,483,2.102,484,4.4,485,4.4,486,2.497,487,4.4,488,2.497,489,2.497,490,2.497,491,2.497,492,4.864,493,2.497,494,2.497,495,2.497,496,4.4,497,2.497]],["title/controllers/TagsController.html",[0,1.062,498,2.19]],["body/controllers/TagsController.html",[0,1.544,2,1.544,3,0.429,4,0.378,5,0.378,7,0.429,8,0.027,9,1.074,12,0.429,13,0.02,16,0.024,17,0.024,90,2.884,144,3.558,498,3.794,499,4.06,500,4.823]],["title/modules/TagsModule.html",[18,1.062,33,1.984]],["body/modules/TagsModule.html",[2,1.724,3,0.386,4,0.339,5,0.339,7,0.545,8,0.028,9,0.965,12,0.386,13,0.018,16,0.022,17,0.022,18,1.724,20,1.858,33,3.219,39,2.366,44,2.59,45,1.858,54,3.219,347,2.859,498,3.867,501,4.332,502,4.332,503,4.332]],["title/entities/User.html",[46,1.423,312,1.423]],["body/entities/User.html",[3,0.269,4,0.237,5,0.237,7,0.269,8,0.027,12,0.269,13,0.012,16,0.017,17,0.017,46,1.819,59,1.276,61,1.65,63,3.322,68,3.234,78,0.532,81,1.246,84,1.947,105,1.176,118,2.27,120,3.234,121,1.444,161,2.317,276,3.615,277,4.125,293,1.819,312,1.819,319,3.234,321,3.507,322,4.014,325,3.694,326,1.4,373,4.487,374,4.487,387,3.129,504,2.543,505,6.082,506,3.021,507,3.021,508,3.021,509,3.021,510,3.021]],["title/controllers/UsersController.html",[0,1.062,511,2.19]],["body/controllers/UsersController.html",[0,0.671,2,0.671,3,0.187,4,0.164,5,0.164,7,0.472,8,0.027,9,0.467,12,0.187,13,0.009,15,0.899,16,0.013,17,0.013,48,1.097,59,1.094,78,0.369,79,1.5,81,0.881,83,1.833,85,2.228,90,1.253,95,0.971,96,1.052,106,2.82,107,1.833,112,1.986,113,2.063,114,1.361,121,1.021,143,1.383,147,2.661,160,3.746,161,2.431,166,2.023,169,3.613,239,1.052,273,2.777,293,2.605,302,3.04,304,3.498,333,1.383,334,1.145,362,3.613,369,2.389,404,1.936,422,2.726,425,2.726,426,4.049,429,2.726,430,2.726,431,1.764,433,1.764,439,1.764,460,1.546,463,1.764,470,2.726,511,2.137,512,1.764,513,3.237,514,3.955,515,2.096,516,2.096,517,2.096,518,4.28,519,2.096,520,3.237,521,3.237,522,3.237,523,2.096,524,3.237,525,3.237,526,2.726,527,2.096,528,3.237,529,3.237,530,3.237,531,4.449,532,2.096,533,3.237,534,3.237,535,3.237,536,2.096,537,2.096,538,2.096,539,2.096,540,2.096,541,2.096,542,2.096,543,2.096,544,3.955,545,2.096,546,2.096,547,2.096,548,1.764,549,1.764,550,1.764,551,1.764,552,3.955,553,2.096,554,2.096,555,2.096,556,1.764,557,2.096,558,2.096,559,2.096,560,2.096,561,2.096,562,2.096,563,2.096,564,2.096,565,2.096]],["title/modules/UsersModule.html",[18,1.062,34,1.666]],["body/modules/UsersModule.html",[2,1.144,3,0.318,4,0.28,5,0.28,7,0.543,8,0.028,9,0.796,12,0.318,13,0.015,16,0.019,17,0.019,18,1.712,20,1.532,21,1.655,22,1.952,23,1.952,24,1.655,25,2.921,26,2.921,30,2.598,34,3.127,35,2.598,36,1.952,37,1.794,39,1.952,44,2.136,45,1.532,46,2.04,101,3.139,107,3.043,347,2.358,511,3.139,551,3.008,566,3.008,567,3.008,568,3.008,569,3.572,570,3.572,571,3.572,572,3.008,573,3.572]],["title/injectables/UsersService.html",[75,1.227,107,1.537]],["body/injectables/UsersService.html",[3,0.185,4,0.163,5,0.163,7,0.471,8,0.028,9,0.464,12,0.185,13,0.016,15,1.69,16,0.013,17,0.013,45,0.893,46,2.057,57,1.245,59,0.99,72,2.712,75,1.191,76,1.138,78,0.367,79,1.492,81,1.068,83,1.825,84,1.42,85,1.825,92,2.742,95,1.492,96,1.045,101,1.374,105,0.894,106,2.972,107,1.492,108,1.753,112,2.226,113,1.902,114,1.525,118,2.222,120,2.927,121,0.537,122,1.753,125,1.753,129,2.377,166,0.829,169,2.6,273,2.77,276,3.272,293,2.268,302,2.867,304,3.165,311,1.753,326,0.965,330,1.138,334,1.138,350,2.907,352,2.927,356,1.536,357,1.536,360,2.377,369,1.536,404,1.245,451,2.712,460,1.536,472,1.536,473,1.753,474,1.753,478,1.753,479,1.753,518,3.317,549,1.753,550,1.753,572,1.753,574,1.753,575,3.221,576,2.712,577,3.221,578,3.221,579,3.221,580,3.94,581,3.221,582,2.082,583,3.94,584,2.082,585,2.082,586,2.082,587,3.221,588,2.082,589,3.221,590,2.082,591,2.082,592,3.221,593,2.082,594,2.082,595,2.082,596,2.082,597,2.082,598,2.082,599,2.082,600,2.082,601,3.94,602,2.082,603,2.082,604,2.082,605,2.082,606,2.082,607,2.082,608,3.221,609,2.082,610,2.082,611,2.082]],["title/coverage.html",[612,3.339]],["body/coverage.html",[0,1.815,1,1.857,5,0.22,6,2.368,8,0.027,10,1.537,13,0.024,16,0.017,17,0.017,24,1.303,46,1.206,48,1.118,52,1.868,54,1.682,59,0.581,75,2.014,77,2.368,88,1.857,89,2.368,92,1.412,104,2.368,107,1.303,132,1.537,134,2.368,135,2.974,155,1.412,235,1.857,252,2.207,253,2.368,257,2.075,258,2.368,259,2.368,273,1.537,274,2.368,275,2.974,302,1.682,303,2.368,304,1.857,305,2.368,312,2.207,313,1.303,314,2.368,327,1.857,328,2.368,335,1.537,348,2.368,349,2.368,362,1.857,363,2.368,370,2.368,396,1.857,397,2.368,404,1.682,417,1.857,427,1.537,450,2.368,483,2.368,498,1.857,499,2.368,504,2.368,511,1.857,512,2.368,574,2.368,576,2.368,612,2.075,613,2.368,614,2.813,615,2.813,616,6.628,617,6.079,618,5.446,619,4.031,620,2.368,621,2.813,622,2.813,623,2.813,624,2.368,625,4.031,626,2.813,627,2.813,628,2.813,629,2.813,630,2.813,631,2.813]],["title/dependencies.html",[21,1.849,632,2.334]],["body/dependencies.html",[8,0.028,9,0.948,13,0.022,16,0.022,17,0.022,21,1.972,45,1.826,231,2.137,232,3.14,239,2.137,326,1.972,367,3.584,368,3.584,548,3.584,633,4.256,634,4.256,635,5.812,636,4.256,637,4.256,638,4.256,639,4.256,640,4.256,641,4.256,642,4.256,643,4.256,644,4.256,645,4.256,646,4.256,647,4.256,648,4.256,649,4.256,650,4.256]],["title/miscellaneous/enumerations.html",[651,1.83,652,3.359]],["body/miscellaneous/enumerations.html",[8,0.027,16,0.022,17,0.022,48,1.486,78,0.757,139,3.951,169,3.534,170,4.508,171,4.508,201,3.951,203,4.508,204,4.508,205,4.508,206,4.508,651,2.834,652,3.615,653,4.294,654,4.294,655,4.294,656,6.572,657,4.294]],["title/miscellaneous/functions.html",[651,1.83,658,3.359]],["body/miscellaneous/functions.html",[8,0.024,16,0.024,17,0.024,24,2.905,78,0.894,620,4.271,651,3.348,658,4.271,659,5.073]],["title/index.html",[78,0.489,660,2.773,661,2.773]],["body/index.html",[4,0.18,8,0.026,16,0.014,17,0.014,37,2.648,73,4.161,147,2.794,166,0.916,167,1.939,248,1.939,352,1.52,419,1.939,469,2.929,472,3.892,526,1.939,556,4.441,612,1.699,613,2.929,662,2.303,663,2.303,664,4.193,665,3.479,666,2.303,667,2.303,668,2.303,669,2.303,670,3.479,671,4.193,672,2.303,673,4.672,674,2.303,675,5.639,676,2.303,677,5.477,678,2.303,679,2.303,680,2.303,681,3.479,682,2.303,683,3.479,684,2.303,685,4.193,686,2.303,687,2.303,688,2.303,689,2.303,690,2.303,691,2.303,692,4.672,693,2.303,694,3.479,695,2.303,696,2.303,697,2.303,698,2.303,699,3.479,700,4.672,701,2.303,702,3.479,703,2.303,704,3.479,705,5.275,706,4.672,707,2.303,708,3.479,709,2.303,710,2.303,711,2.303,712,2.303,713,4.672,714,2.303,715,2.303,716,2.303,717,2.303,718,3.479,719,2.303,720,2.303,721,2.303,722,2.303,723,2.303,724,3.479,725,2.303,726,2.303,727,2.303,728,3.479,729,2.303,730,2.303,731,3.934,732,3.479,733,2.303,734,2.303,735,2.303,736,2.303,737,2.303,738,2.303,739,2.303,740,2.303,741,3.479,742,2.303,743,1.939,744,2.303,745,2.303,746,4.193,747,2.303,748,2.303,749,2.303,750,2.303,751,2.303,752,2.303,753,3.479,754,2.303,755,2.303,756,2.303,757,2.303,758,3.479,759,2.303,760,2.303,761,2.303,762,3.479,763,3.479,764,2.303,765,2.303,766,2.303,767,2.303,768,2.303,769,2.303,770,2.303,771,2.303,772,2.303,773,2.303,774,2.303,775,1.939,776,2.303,777,2.303,778,2.303,779,2.303,780,2.303,781,2.303,782,1.939]],["title/modules.html",[20,1.941]],["body/modules.html",[8,0.023,16,0.023,17,0.023,19,3.006,20,1.953,30,2.488,31,2.723,32,2.723,33,2.723,34,2.286,731,5.382,743,3.834,783,6.393,784,6.393,785,6.502,786,4.553]],["title/overview.html",[787,3.81]],["body/overview.html",[2,1.028,8,0.027,10,2.764,16,0.018,17,0.018,18,1.028,19,4.319,20,1.376,21,1.487,22,1.753,23,1.753,24,1.487,25,1.753,26,1.753,27,2.702,28,2.702,29,2.702,30,3.23,31,3.536,32,3.623,33,3.026,34,3.042,35,2.416,36,1.753,37,1.611,61,1.753,76,1.753,92,3.042,97,2.702,98,2.702,99,2.702,107,2.807,133,1.487,335,3.31,341,2.702,342,2.702,343,2.702,427,2.764,444,2.702,446,2.702,566,2.702,567,2.702,568,2.702,787,2.702,788,4.422,789,3.209,790,3.209,791,3.209]],["title/classes/patchPostsDto.html",[13,0.014,417,2.19]],["body/classes/patchPostsDto.html",[3,0.351,4,0.309,5,0.309,7,0.499,8,0.027,12,0.351,13,0.021,16,0.021,17,0.021,48,1.408,59,0.815,78,0.696,81,0.879,105,1.408,118,2.839,121,1.019,132,2.156,133,1.829,135,2.912,166,1.571,223,3.036,231,1.982,237,3.746,239,1.982,268,3.323,293,2.177,310,4.274,330,2.156,364,4.274,366,3.323,409,3.323,417,3.351,432,2.912,624,4.274,792,5.076,793,5.076,794,3.947,795,3.947]],["title/properties.html",[105,1.107,632,2.334]],["body/properties.html",[8,0.027,16,0.024,17,0.024,105,1.386,166,1.988,775,4.206,782,4.206,796,4.995,797,4.995,798,4.995]],["title/routes.html",[799,3.81]],["body/routes.html",[8,0.025,16,0.025,17,0.025,799,4.432]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":797,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":470,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":375,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":311,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":308,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":471,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":492,"title":{},"body":{"entities/Tag.html":{}}}],["3/6",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":789,"title":{},"body":{"overview.html":{}}}],["40",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":790,"title":{},"body":{"overview.html":{}}}],["50",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":386,"title":{},"body":{"entities/Post.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":788,"title":{},"body":{"overview.html":{}}}],["7",{"_index":791,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["8.11.5",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":505,"title":{},"body":{"entities/User.html":{}}}],["alice",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":719,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":768,"title":{},"body":{"index.html":{}}}],["api",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/patchPostsDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(3)@maxlength(256",{"_index":264,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":268,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/patchPostsDto.html":{}}}],["apipropertyoptional",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isjson()@isnotempty",{"_index":266,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isstring()@isnotempty",{"_index":260,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isurl()@isnotempty()@maxlength(1024",{"_index":262,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":306,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":670,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":350,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":88,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":775,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":92,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["autoloadentities",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":786,"title":{},"body":{"modules.html":{}}}],["await",{"_index":360,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":708,"title":{},"body":{"index.html":{}}}],["backers",{"_index":769,"title":{},"body":{"index.html":{}}}],["based",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blof",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["blog",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":761,"title":{},"body":{"index.html":{}}}],["body",{"_index":333,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":785,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":783,"title":{},"body":{"modules.html":{}}}],["building",{"_index":665,"title":{},"body":{"index.html":{}}}],["business",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["cascade",{"_index":379,"title":{},"body":{"entities/Post.html":{}}}],["channel",{"_index":734,"title":{},"body":{"index.html":{}}}],["character",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":472,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/patchPostsDto.html":{}}}],["classes",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{},"classes/patchPostsDto.html":{}}}],["clicks",{"_index":718,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":703,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":341,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":342,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":343,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":444,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":445,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":446,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":566,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":568,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":567,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":325,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":321,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":725,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(isauth",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostsdto",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":351,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(usersservice",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":338,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":500,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers:[userscontroller",{"_index":573,"title":{},"body":{"modules/UsersModule.html":{}}}],["courses",{"_index":740,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":612,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":330,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["create(@body",{"_index":339,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["create(createpostdto",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":331,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createdate",{"_index":484,"title":{},"body":{"entities/Tag.html":{}}}],["createdatecolumn",{"_index":317,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":315,"title":{},"body":{"entities/MetaOption.html":{}}}],["createpost",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":132,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["createpostdto.slug",{"_index":477,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostmetaoptionsdto",{"_index":155,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":257,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":273,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{}}}],["database",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["deeper",{"_index":736,"title":{},"body":{"index.html":{}}}],["default",{"_index":382,"title":{},"body":{"entities/Post.html":{}}}],["defaultvaluepipe",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["delete",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedat",{"_index":485,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":487,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":692,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":707,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":699,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":717,"title":{},"body":{"index.html":{}}}],["description",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/patchPostsDto.html":{},"properties.html":{}}}],["development",{"_index":678,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":748,"title":{},"body":{"index.html":{}}}],["discord",{"_index":733,"title":{},"body":{"index.html":{}}}],["dive",{"_index":735,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":613,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["domain",{"_index":462,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":334,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":687,"title":{},"body":{"index.html":{}}}],["each",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":666,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":698,"title":{},"body":{"index.html":{}}}],["eight",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email:\"alice@dmail.com",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["email:\"john@dmail.com",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":696,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":752,"title":{},"body":{"index.html":{}}}],["entities",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":312,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enum/poststatus.enum",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enum/posttype.enum",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":652,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":479,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":473,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existslug",{"_index":475,"title":{},"body":{"injectables/PostsService.html":{}}}],["experience",{"_index":738,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":364,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["false",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":711,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":721,"title":{},"body":{"index.html":{}}}],["featurted",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":713,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["find",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id:string",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":720,"title":{},"body":{"index.html":{}}}],["follow",{"_index":755,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":664,"title":{},"body":{"index.html":{}}}],["from'class",{"_index":256,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["full",{"_index":751,"title":{},"body":{"index.html":{}}}],["function",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":658,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":716,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":413,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":660,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":302,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":743,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":765,"title":{},"body":{"index.html":{}}}],["handle",{"_index":478,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":737,"title":{},"body":{"index.html":{}}}],["handy",{"_index":726,"title":{},"body":{"index.html":{}}}],["headers",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":741,"title":{},"body":{"index.html":{}}}],["here",{"_index":773,"title":{},"body":{"index.html":{}}}],["hoisystem",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["host",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":779,"title":{},"body":{"index.html":{}}}],["id",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["identifier",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":78,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/patchPostsDto.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["information",{"_index":701,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":723,"title":{},"body":{"index.html":{}}}],["inject",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(undefined",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":75,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":357,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":358,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":464,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":715,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":676,"title":{},"body":{"index.html":{}}}],["interact",{"_index":744,"title":{},"body":{"index.html":{}}}],["ip",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdate",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":310,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/patchPostsDto.html":{}}}],["isiso8601",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apiproperty({description",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/patchPostsDto.html":{}}}],["isnotempty()@isjson",{"_index":254,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["iso8601",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@validatenested({each",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(4)@maxlength(512)@apiproperty({example",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstrongpassword",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":758,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":760,"title":{},"body":{"index.html":{}}}],["john",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":771,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":392,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":776,"title":{},"body":{"index.html":{}}}],["key",{"_index":693,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":729,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":374,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":782,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":763,"title":{},"body":{"index.html":{}}}],["limit",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":757,"title":{},"body":{"index.html":{}}}],["list",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email:string",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":702,"title":{},"body":{"index.html":{}}}],["loop",{"_index":754,"title":{},"body":{"index.html":{}}}],["makes",{"_index":709,"title":{},"body":{"index.html":{}}}],["managing",{"_index":722,"title":{},"body":{"index.html":{}}}],["matches",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{},"routes.html":{}}}],["mau",{"_index":705,"title":{},"body":{"index.html":{}}}],["max",{"_index":271,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":272,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metadata",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":313,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.dto",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.dto.ts",{"_index":253,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:5",{"_index":255,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptionscontroller",{"_index":327,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":354,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":335,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":651,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":762,"title":{},"body":{"index.html":{}}}],["mode",{"_index":681,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":700,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":777,"title":{},"body":{"index.html":{}}}],["name",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":749,"title":{},"body":{"index.html":{}}}],["needs",{"_index":793,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["nest",{"_index":671,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":781,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":367,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"classes/patchPostsDto.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpost",{"_index":480,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":663,"title":{},"body":{"index.html":{}}}],["npm",{"_index":675,"title":{},"body":{"index.html":{}}}],["null",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":322,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{}}}],["object",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":759,"title":{},"body":{"index.html":{}}}],["official",{"_index":706,"title":{},"body":{"index.html":{}}}],["one",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetoone",{"_index":393,"title":{},"body":{"entities/Post.html":{}}}],["onetoone(undefined",{"_index":378,"title":{},"body":{"entities/Post.html":{}}}],["open",{"_index":764,"title":{},"body":{"index.html":{}}}],["operation",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["option.entity",{"_index":346,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":314,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:12",{"_index":323,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:15",{"_index":318,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:18",{"_index":324,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:6",{"_index":320,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":329,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":345,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":328,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:16",{"_index":332,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":344,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":337,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":349,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:19",{"_index":355,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":353,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":348,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":787,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":632,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":305,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:15",{"_index":309,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":750,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":366,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/patchPostsDto.html":{}}}],["partialtype(createpostdto",{"_index":792,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["partialtype(createuserdto",{"_index":365,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password:string",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch(@body",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(patchuserdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpostsdto",{"_index":417,"title":{"classes/patchPostsDto.html":{}},"body":{"controllers/PostsController.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["patchuserdto",{"_index":362,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["pg",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":704,"title":{},"body":{"index.html":{}}}],["please",{"_index":732,"title":{},"body":{"index.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":48,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"classes/patchPostsDto.html":{}}}],["post'})@apiresponse({status",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":269,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["post()@apioperation({summary",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/patchPostsDto.html":{}}}],["post.dto.ts",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["post.dto.ts:10",{"_index":795,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["post.dto.ts:14",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:21",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:38",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:45",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":449,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postgres",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts'})@apiresponse({status",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":448,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/post.entity",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":396,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":32,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":427,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":395,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":394,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":319,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":683,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":662,"title":{},"body":{"index.html":{}}}],["project",{"_index":673,"title":{},"body":{"index.html":{}}}],["properties",{"_index":105,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/patchPostsDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":336,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":730,"title":{},"body":{"index.html":{}}}],["read",{"_index":772,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":691,"title":{},"body":{"index.html":{}}}],["real",{"_index":745,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":352,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":712,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":724,"title":{},"body":{"index.html":{}}}],["response",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/patchPostsDto.html":{},"properties.html":{},"routes.html":{}}}],["returm",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routes",{"_index":799,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":677,"title":{},"body":{"index.html":{}}}],["runs",{"_index":697,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":474,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sample_token",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":667,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":668,"title":{},"body":{"index.html":{}}}],["service",{"_index":463,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["setup",{"_index":674,"title":{},"body":{"index.html":{}}}],["side",{"_index":669,"title":{},"body":{"index.html":{}}}],["sidebarenaled",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":714,"title":{},"body":{"index.html":{}}}],["slug",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["small",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/patchPostsDto.html":{}}}],["spaces",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":307,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":767,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":659,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":653,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":654,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":571,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:8",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":252,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":624,"title":{},"body":{"coverage.html":{},"classes/patchPostsDto.html":{}}}],["src/posts/enum/poststatus.enum.ts",{"_index":655,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enum/posttype.enum.ts",{"_index":657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity.ts",{"_index":370,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:10",{"_index":377,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:17",{"_index":391,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:25",{"_index":383,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":388,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:41",{"_index":389,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:47",{"_index":372,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:53",{"_index":385,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":376,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":384,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:71",{"_index":381,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:73",{"_index":390,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:15",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:30",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:43",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":447,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":450,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:11",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:26",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:33",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:44",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":258,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts",{"_index":483,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:14",{"_index":493,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:22",{"_index":495,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:28",{"_index":489,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:34",{"_index":494,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":490,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":486,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:47",{"_index":497,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":488,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:6",{"_index":491,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":499,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.module.ts",{"_index":501,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":303,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":363,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:17",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:26",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:43",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:62",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":504,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":507,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":509,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":506,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":510,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":508,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:53",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":569,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":679,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":682,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":684,"title":{},"body":{"index.html":{}}}],["started",{"_index":661,"title":{"index.html":{}},"body":{}}],["starter",{"_index":672,"title":{},"body":{"index.html":{}}}],["statements",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":753,"title":{},"body":{"index.html":{}}}],["steps",{"_index":694,"title":{},"body":{"index.html":{}}}],["story",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":710,"title":{},"body":{"index.html":{}}}],["string",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["succefully",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["success",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":410,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":731,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":784,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":54,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag.dto.ts",{"_index":259,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:18",{"_index":270,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":261,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:26",{"_index":267,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:30",{"_index":263,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:8",{"_index":265,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":503,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":502,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tag.entity",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":498,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["take",{"_index":695,"title":{},"body":{"index.html":{}}}],["test",{"_index":469,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":689,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":688,"title":{},"body":{"index.html":{}}}],["tests",{"_index":685,"title":{},"body":{"index.html":{}}}],["text",{"_index":371,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":766,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionsrepository.create",{"_index":359,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":361,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":340,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create(createpostdto",{"_index":481,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":476,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(newpost",{"_index":482,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":465,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":466,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":467,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":746,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":774,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@joincolumn",{"_index":380,"title":{},"body":{"entities/Post.html":{}}}],["true})@minlength(3",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined)@apipropertyoptional({type",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":780,"title":{},"body":{"index.html":{}}}],["type",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/patchPostsDto.html":{}}}],["typeorm",{"_index":326,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":347,"title":{},"body":{"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":368,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["unique",{"_index":387,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":686,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":356,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":798,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{},"classes/patchPostsDto.html":{}}}],["updated'})@isint()@isnotempty",{"_index":794,"title":{},"body":{"classes/patchPostsDto.html":{}}}],["updatedate",{"_index":316,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":496,"title":{},"body":{"entities/Tag.html":{}}}],["updateposts",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateposts(@body",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateposts(patchpostsdto",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url\"'})@apiproperty({description",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":46,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":369,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":572,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user:user",{"_index":468,"title":{},"body":{"injectables/PostsService.html":{}}}],["userid",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["userid:string",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["username",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":304,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":570,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":511,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":107,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice:usersservice",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["uses",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":747,"title":{},"body":{"index.html":{}}}],["valid",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested({each:true",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{},"classes/patchPostsDto.html":{}}}],["value",{"_index":656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":373,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":796,"title":{},"body":{"properties.html":{}}}],["video",{"_index":739,"title":{},"body":{"index.html":{}}}],["visit",{"_index":728,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":742,"title":{},"body":{"index.html":{}}}],["void",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":680,"title":{},"body":{"index.html":{}}}],["wazzapppppp",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["website",{"_index":778,"title":{},"body":{"index.html":{}}}],["without",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":727,"title":{},"body":{"index.html":{}}}],["x",{"_index":756,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":770,"title":{},"body":{"index.html":{}}}],["you're",{"_index":690,"title":{},"body":{"index.html":{}}}],["z0",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { Post } from './posts/post.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { Tag } from './tags/tag.entity';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule, \n\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: ()=> ({\n        type: 'postgres',\n        // entities: [User, Post, Tag],\n        autoLoadEntities: true,\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'hoisystem',\n        host: 'localhost',\n        database: 'nestjs-blog'\n      }),\n    }), TagsModule, MetaOptionsModule\n\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\n\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Wazzapppppp!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly authService: AuthService\n    ){}\n\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  imports: [forwardRef(()=> UsersModule)],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Readonly\n                                usersService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        usersService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/providers/auth.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(forwardRef(()=> UsersService))\n        public readonly usersService:UsersService,\n    ){}\n    \n    public login(email:string, password:string, id: string){\n        const user = this.usersService.findOnebyId('1234');\n        //login\n        return \"SAMPLE_TOKEN\";\n    }\n\n    public isAuth(){\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'Featurted image for your blog posts', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested({each: true})@Type(undefined)@ApiPropertyOptional({type: 'object', required: false, items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'post', 'page', 'story', 'series''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})@ApiPropertyOptional({description: 'Array of tags passed as string values', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)@ApiProperty({example: 'This is a title', description: 'This is the title for the blof posts'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsDate, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { postStatus } from \"../enum/postStatus.enum\";\nimport { postType } from \"../enum/postType.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-metaoptions.dto\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @IsString() @IsNotEmpty() @MinLength(4) @MaxLength(512)\n    @ApiProperty({\n        example: 'This is a title',\n        description: 'This is the title for the blof posts'\n    })\n    title: string;\n\n    @IsEnum(postType) @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'post', 'page', 'story', 'series'\"\n    })\n    postType: postType;\n\n    @IsString() @IsNotEmpty() @MaxLength(512) @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message:\n          'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n      })\n    @ApiProperty({\n            description: \"For example - 'my-url'\",\n            example: 'my-blog-post'\n    })\n    slug: string;\n\n    @IsEnum(postStatus) @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \"Possible values 'draft', 'scheduled', 'review', 'published'\"\n    })\n    status: postStatus;\n\n    @IsString() @IsOptional()\n    @ApiPropertyOptional({\n        description: 'This is the content of the post',\n        example: 'The post content'\n    })\n    content?: string;\n\n    @IsOptional() @IsJSON()\n    @ApiPropertyOptional({\n        description:\n          'Serialize your JSON object else a validation error will be thrown',\n    })\n    schema?: string;\n\n    @IsString() @IsUrl() @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: 'Featurted image for your blog posts',\n        example: 'http://localhost.com/images/image1.jpg'\n    })\n    featuredImageUrl?: string;\n\n    @IsISO8601() @IsOptional()\n    @ApiProperty({\n        description: 'Must be a valid timestamp in ISO8601',\n        example: '2024-03-16T07:46:32+0000',\n      })\n    publishOn?: Date;\n\n    @IsOptional() @IsArray() @IsString({ each: true }) @MinLength(3, {each: true})\n    @ApiPropertyOptional({\n        description: 'Array of tags passed as string values',\n        example: ['nestjs', 'typescript']\n    })\n    tags?: string[];\n\n    @IsOptional() @ValidateNested({each:true}) @Type(()=> CreatePostMetaOptionsDto)\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n          type: 'object',\n          properties: {\n            metaValue: {\n              type: 'json',\n              description: 'The metaValue is a JSON string',\n              example: '{sidebarEnaled: true}'\n            },\n          },\n        },\n      })\n    metaOptions?: CreatePostMetaOptionsDto | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoptions.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from'class-validator';\n\nexport class CreatePostMetaOptionsDto{\n    @IsNotEmpty() @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsUrl()@IsNotEmpty()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString, MaxLength, MinLength, Matches, IsJSON, IsUrl, Max } from \"class-validator\";\n\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsNotEmpty() @IsString() @MinLength(3) @MaxLength(256)\n    name: string;\n\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: 'my-blog-post'\n    })\n    @IsString() @IsNotEmpty() @MaxLength(256) @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message:\n          'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n      })\n    slug: string;\n\n    @ApiPropertyOptional()\n    @IsString() @IsNotEmpty()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsJSON() @IsNotEmpty()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsUrl() @IsNotEmpty() @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, IsStrongPassword, MaxLength, MinLength, Matches } from \"class-validator\";\n\nexport class CreateUserDto{\n    @IsString() @IsNotEmpty() @MinLength(3) @MaxLength(96)\n    firstName: string;\n\n    @IsString() @IsOptional() @MinLength(3) @MaxLength(96)\n    lastName: string;\n\n    @IsString() @IsNotEmpty() @IsEmail() @MaxLength(96)\n    email: string;\n\n    @IsString() @IsNotEmpty() @MinLength(8) @MaxLength(96)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message:\n          'Minimum eight characters, at least one letter, one number and one special character',\n      })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from \"class-validator\";\nimport {Type} from 'class-transformer';\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class GetUsersParamDto{\n    @ApiPropertyOptional(\n        {\n            description: 'Get user with specific id',\n            example: '1234'\n        }\n    )\n    @IsOptional()\n    @IsInt()\n    @Type(()=> Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'json',\n        nullable: false,\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createdDate: Date;\n    \n    @CreateDateColumn()\n    updateDate: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-metaoptions.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n    constructor(\n        /**\n         * Inject MetaOptionsService\n         */\n\n        private readonly metaOptionsService: MetaOptionsService,\n    ){}\n    \n    @Post()\n    public create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,){\n        return this.metaOptionsService.create(createPostMetaOptionsDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOption } from './meta-option.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([\n    MetaOption\n  ])],\n  providers: [MetaOptionsService],\n  exports: [MetaOptionsService]\n})\n\nexport class MetaOptionsModule {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-metaoptions.dto';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n    constructor(\n        /**\n         * Inject metaoptionsRepository\n         */\n\n        @InjectRepository(MetaOption)\n        private readonly metaOptionsRepository: Repository,\n    ){}\n\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto){\n        let metaOption = this.metaOptionsRepository.create(\n            createPostMetaOptionsDto\n        )\n        return await this.metaOptionsRepository.save(metaOption);\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto){}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { postType } from \"./enum/postType.enum\";\nimport { postStatus } from \"./enum/postStatus.enum\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-metaoptions.dto\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 512,\n        nullable: false\n    })\n    title: string;\n\n    @Column({\n        type: 'enum',\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: 'varchar',\n        length: 512,\n        nullable: false,\n        unique: true,\n    })\n    slug: string;\n\n    @Column({\n        type: 'enum',\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n      })\n      content?: string;\n    \n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: 'timestamp',\n        nullable: true,\n    })\n    publishOn?: Date;\n\n    @OneToOne(()=> MetaOption, {\n        cascade: true,\n    }) @JoinColumn()\n    metaOptions?: MetaOption;\n\n    tags?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Creates a new blog posts'})@ApiResponse({status: 201, description: 'You get a success 201 response if the post is updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePosts(patchPostsDto: patchPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'You get a success 200 response if the post is updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            patchPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {ApiOperation, ApiResponse, ApiTags} from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { patchPostsDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n    constructor(\n        private readonly postsService: PostsService,\n    ){}\n\n    @Get('/:userId?')\n    public getPosts(\n        @Param('userId') userId:string\n    ){\n        return this.postsService.findAll(userId);\n    }\n\n    @Post()\n    @ApiOperation({\n        summary: 'Creates a new blog posts'\n    })\n    @ApiResponse({\n        status: 201,\n        description:\n          'You get a success 201 response if the post is updated successfully',\n    })\n    public createPost(@Body() createPostDto: CreatePostDto){\n        return this.postsService.create(createPostDto)\n    }\n\n    @Patch()\n    @ApiOperation({\n        summary: 'Updates an existing blog post'\n    })\n    @ApiResponse({\n        status: 200,\n        description:\n          'You get a success 200 response if the post is updated successfully',\n    })\n    public updatePosts(@Body() patchPostsDto: patchPostsDto){\n        console.log(patchPostsDto)\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule,\n    TypeOrmModule.forFeature([\n      Post, MetaOption\n    ])\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                metaOptionsRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        metaOptionsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(MetaOption)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/posts.service.ts:26\n                        \n                    \n\n            \n                \n                    Injecting metaOptionRepository\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { create } from 'domain';\n\n@Injectable()\nexport class PostsService {\n    constructor(\n        //Injecting user service\n        private readonly usersService: UsersService,\n\n        /**\n         * Injecting postsRepository\n         */\n        @InjectRepository(Post)\n        private postsRepository: Repository,\n\n        /**\n         * Injecting metaOptionRepository\n         */\n        @InjectRepository(MetaOption)\n        public metaOptionsRepository: Repository\n    ){}\n\n    /**\n     * Creating new posts\n     */\n\n    public async create(@Body() createPostDto: CreatePostDto){\n\n        // Create post\n        let post = this.postsRepository.create({\n            ...createPostDto,\n        });\n\n        // return the post\n        return await this.postsRepository.save(post);\n    }\n\n    public findAll(userId: string){\n        const user = this.usersService.findOnebyId(userId);\n\n        return[\n            {\n                user:user,\n                title: \"title Test\",\n                content: \"title 1\"\n            },\n            {\n                user:user,\n                title: \"title Test 2\",\n                content: \"title 2\"\n            }\n        ]\n\n    }\n\n    // public async createPost (createPostDto: CreatePostDto){\n    //     // Check is user exists with the same slug\n    //     const existSlug = await this.postRepository.findOne({\n    //         where: {slug: createPostDto.slug},\n\n    //     })\n    //     // Handle exception\n    //     // Create a new post\n    //     let newPost = this.postRepository.create(createPostDto);\n    //     newPost = await this.postRepository.save(newPost);\n\n    //     return newPost;\n    // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag{\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true,\n    })\n    name: string;\n\n    @Column({\n        type: 'varchar',\n        length: 256,\n        nullable: false,\n        unique: true,\n    })\n    slug: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: 'text',\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl?: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deletedAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([\n    Tag\n  ])]\n})\nexport class TagsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: true\n    })\n    firstName: string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: true\n    })\n    lastName: string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n\n    @Column({\n        type: 'varchar',\n        length: 96,\n        nullable: true\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched succefully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returm per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Put, Delete, Param, \n    Query, Body, Req, Headers, Ip, ParseIntPipe,\nDefaultValuePipe, ValidationPipe } from '@nestjs/common';\nimport { Request} from 'express';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport {ApiOperation, ApiQuery, ApiResponse, ApiTags} from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n    constructor(\n        // Injecting Users Service\n        private readonly usersService: UsersService,\n    ){}\n\n    @Get('/:id?')\n    @ApiOperation({\n        summary: 'Fetches a list of registered users on the application'\n    })\n    @ApiResponse({\n        status: 200,\n        description: 'Users fetched succefully based on the query',\n    })\n    @ApiQuery(\n        {\n            name: 'limit',\n            type: 'number',\n            required: false,\n            description: 'The number of entries returm per query',\n            example: 10\n        }\n    )\n    @ApiQuery(\n        {\n            name: 'page',\n            type: 'number',\n            required: false,\n            description: 'The position of the page number that you want the API to return',\n            example: 1\n        }\n    )\n    public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto, \n    @Query('limit',  new DefaultValuePipe(10), ParseIntPipe) limit: number,  \n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number){\n        return this.usersService.findAll(getUsersParamDto, limit, page);\n    }\n\n    @Post()\n    public createUsers(@Body() createUserDto: CreateUserDto){\n        \n        return this.usersService.createUser(createUserDto);\n    }\n\n    @Patch()\n    public patch(@Body() patchUserDto: PatchUserDto){\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n    controllers:[UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n    imports: [forwardRef(()=> AuthModule), \n        TypeOrmModule.forFeature([\n            User\n     ])\n    ],\n})\nexport class UsersModule {}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operation\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Readonly\n                                authService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOnebyId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:43\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOnebyId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOnebyId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Find a user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Readonly\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/providers/users.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\nimport { Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\n\n/**\n * Class to connect to Users table and perform business operation\n */\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        @Inject(forwardRef(()=> AuthService))\n        public readonly authService:AuthService,\n\n        /**\n         * Injecting userRepository\n         */\n        @InjectRepository(User)\n        private usersRepository: Repository\n    ){}\n\n    public async createUser (createUserDto: CreateUserDto){\n        // Check is user exists with the same email\n        const existingUser = await this.usersRepository.findOne({\n            where: {email: createUserDto.email},\n\n        })\n        // Handle exception\n        // Create a new user\n        let newUser = this.usersRepository.create(createUserDto);\n        newUser = await this.usersRepository.save(newUser);\n\n        return newUser;\n    }\n\n    /**\n     * The method to get all users from the database\n     */\n    public findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number\n    ){\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n        return [\n            {\n                firstName: \"John\",\n                email:\"John@dmail.com\"\n            },\n            {\n                firstName: \"Alice\",\n                email:\"Alice@dmail.com\"\n            }\n        ]\n    }\n\n    /**\n     * Find a user by ID\n     */\n    public findOnebyId(id:string){\n        return {\n            id: 1234,\n            firstName: 'Alice',\n            email: 'alice@doe.com'\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            patchPostsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enum/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enum/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/patchPostsDto.html":{"url":"classes/patchPostsDto.html","title":"class - patchPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  patchPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class patchPostsDto extends PartialType(CreatePostDto){\n    @ApiProperty({\n        description: 'The ID of the post that needs to be updated'\n    })\n    @IsInt() @IsNotEmpty()\n    id: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
